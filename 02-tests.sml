val _ = print "------- neg -------";
val _ : number -> number = neg;
val test_neg_1 = neg Zero = Zero;
val test_neg_2 = neg (Pred (Succ Zero)) = Zero;
val test_neg_3 = neg (Succ (Pred Zero)) = Zero;
val test_neg_4 = neg (Pred (Pred (Succ (Succ Zero)))) = Zero;
val test_neg_5 = neg (Pred (Succ (Succ (Pred Zero)))) = Zero;
val test_neg_6 = neg (Succ Zero) = Pred Zero;
val test_neg_7 = neg (Pred Zero) = Succ Zero;
val test_neg_8 = neg (Succ (Succ Zero)) = Pred (Pred Zero);
val test_neg_9 = neg (Succ (Succ (Succ (Succ (Pred Zero))))) = Pred (Pred (Pred Zero));

val _ = print "------- add -------";
val _ : number * number -> number = add;
val test_add_1 = add (Zero, Zero) = Zero;
val test_add_2 = add (Pred (Succ Zero), Pred (Pred (Succ (Succ Zero)))) = Zero;
val test_add_3 = add (Pred (Pred (Succ (Succ Zero))), Succ (Pred Zero)) = Zero;
val test_add_4 = add (Succ Zero, Pred Zero) = Zero;
val test_add_5 = add (Succ Zero, Succ Zero) = Succ (Succ Zero);
val test_add_6 = add (Succ (Succ Zero), Succ (Succ(Succ (Succ Zero)))) = Succ (Succ (Succ (Succ (Succ (Succ Zero)))));
val test_add_7 = add (Pred Zero, Pred (Pred Zero)) = Pred (Pred (Pred Zero));
val test_add_8 = add (Succ (Succ Zero), Pred Zero) = Succ Zero;
val test_add_9 = add (Pred (Pred (Pred Zero)), Succ (Succ Zero)) = Pred Zero;

val _ = print "------- comp -------";
val _ : number * number -> order = comp;
val test_comp_1 = comp (Zero, Zero) = EQUAL;
val test_comp_2 = comp (Pred (Succ Zero), Pred (Pred (Succ (Succ Zero)))) = EQUAL;
val test_comp_3 = comp (Pred (Pred (Succ (Succ Zero))), Succ (Pred Zero)) = EQUAL;
val test_comp_4 = comp (Succ Zero, Pred Zero) = GREATER;
val test_comp_5 = comp (Pred Zero, Succ Zero) = LESS;
val test_comp_6 = comp (Succ Zero, Succ Zero) = EQUAL;
val test_comp_7 = comp (Pred Zero, Pred (Pred Zero)) = GREATER;
val test_comp_8 = comp (Succ (Succ Zero), Pred Zero) = GREATER;
val test_comp_9 = comp (Pred (Pred (Pred Zero)), Succ (Succ Zero)) = LESS;
val test_comp_10 = comp (Pred (Succ (Pred Zero)), Succ (Succ (Pred Zero))) = LESS;
val test_comp_11 = comp (Succ (Pred (Succ (Succ Zero))), Succ Zero) = GREATER;

val _ = print "------- contains -------";
val _ : tree * int -> bool = contains;
val test_contains_1 = contains (Leaf 5, 42) = false;
val test_contains_2 = contains (Leaf ~10, ~10) = true;
val test_contains_3 = contains (Node (1, Leaf 5, Leaf 7), 0) = false;
val test_contains_4 = contains (Node (1, Leaf 5, Leaf 7), 1) = true;
val test_contains_5 = contains (Node (1, Leaf 5, Leaf 7), 5) = true;
val test_contains_6 = contains (Node (1, Leaf 5, Leaf 7), 7) = true;
val test_contains_7 = contains (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7), ~20) = false;
val test_contains_8 = contains (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7), ~1) = true;
val test_contains_9 = contains (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7), ~3) = true;
val test_contains_10 = contains (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29)), 2) = false;
val test_contains_11 = contains (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29)), 0) = true;
val test_contains_12 = contains (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29)), 45) = true;
val test_contains_13 = contains (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29)), 1) = true;
val test_contains_14 = contains (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29)), 29) = true;

val _ = print "------- countLeaves -------";
val _ : tree -> int = countLeaves;
val test_countLeaves_1 = countLeaves (Leaf 5) = 1;
val test_countLeaves_2 = countLeaves (Leaf ~10) = 1;
val test_countLeaves_3 = countLeaves (Node (1, Leaf 5, Leaf 7)) = 2;
val test_countLeaves_4 = countLeaves (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7)) = 3;
val test_countLeaves_5 = countLeaves (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = 5;
val test_countLeaves_6 = countLeaves (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Node (5, Leaf 3, Leaf 9), Leaf 45), Leaf 29))) = 6;

val _ = print "------- countBranches -------";
val _ : tree -> int = countBranches;
val test_countBranches_1 = countBranches (Leaf 5) = 0;
val test_countBranches_2 = countBranches (Leaf ~10) = 0;
val test_countBranches_3 = countBranches (Node (1, Leaf 5, Leaf 7)) = 2;
val test_countBranches_4 = countBranches (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7)) = 4;
val test_countBranches_5 = countBranches (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = 8;
val test_countBranches_6 = countBranches (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Node (5, Leaf 3, Leaf 9), Leaf 45), Leaf 29))) = 10;

val _ = print "------- height -------";
val _ : tree -> int = height;
val test_height_1 = height (Leaf 5) = 1;
val test_height_2 = height (Leaf ~10) = 1;
val test_height_3 = height (Node (1, Leaf 5, Leaf 7)) = 2;
val test_height_4 = height (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7)) = 3;
val test_height_5 = height (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = 4;
val test_height_6 = height (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Node (5, Leaf 3, Leaf 9), Leaf 45), Leaf 29))) = 5;

val _ = print "------- toList -------";
val _ : tree -> int list = toList;
val test_toList_1 = toList (Leaf 5) = [5];
val test_toList_2 = toList (Leaf ~10) = [~10];
val test_toList_3 = toList (Node (1, Leaf 5, Leaf 7)) = [5, 1, 7];
val test_toList_4 = toList (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7)) = [~2, ~9, ~3, ~1, ~7];
val test_toList_5 = toList (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = [3, 5, 9, 0, 1, 1, 45, 6, 29];
val test_toList_6 = toList (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Node (5, Leaf 3, Leaf 9), Leaf 45), Leaf 29))) = [3, 5, 9, 0, 3, 5, 9, 1, 45, 6, 29];

val _ = print "------- isBalanced -------";
val _ : tree -> bool = isBalanced;
val test_isBalanced_1 = isBalanced (Leaf 5) = true;
val test_isBalanced_2 = isBalanced (Leaf ~10) = true;
val test_isBalanced_3 = isBalanced (Node (1, Leaf 5, Leaf 7)) = true;
val test_isBalanced_4 = isBalanced (Node (~1, Node (~9, Leaf ~2, Leaf ~3), Leaf ~7)) = true;
val test_isBalanced_5 = isBalanced (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = true;
val test_isBalanced_6 = isBalanced (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Node (5, Leaf 3, Leaf 9), Leaf 45), Leaf 29))) = false;
val test_isBalanced_7 = isBalanced (Node (10, Node (5, Node (5, Node (5, Node (5, Leaf 3, Leaf 9), Leaf 9), Leaf 9), Leaf 9), Leaf 5)) = false;

val _ = print "------- isBST -------";
val _ : tree -> bool = isBST;
val test_isBST_1 = isBST (Leaf 5) = true;
val test_isBST_2 = isBST (Leaf ~10) = true;
val test_isBST_3 = isBST (Node (1, Leaf 5, Leaf 7)) = false;
val test_isBST_4 = isBST (Node (1, Leaf ~5, Leaf 7)) = true;
val test_isBST_5 = isBST (Node (~1, Node (~3, Leaf ~9, Leaf ~2), Leaf 7)) = true;
val test_isBST_6 = isBST (Node (~1, Node (5, Leaf ~2, Leaf ~3), Leaf 7)) = false;
val test_isBST_7 = isBST (Node (0, Node (5, Leaf 3, Leaf 9), Node (6, Node (1, Leaf 1, Leaf 45), Leaf 29))) = false;
val test_isBST_8 = isBST (Node (100, Node (5, Leaf 3, Leaf 9), Node (106, Node (100, Leaf 180, Leaf 145), Leaf 129))) = false;
val test_isBST_9 = isBST (Node (100, Node (5, Leaf 3, Leaf 9), Node (106, Node (102, Leaf 101, Leaf 103), Leaf 129))) = true;
val test_isBST_10 = isBST (Node (0, Node (~1, Leaf ~5, Leaf ~3), Node (1, Leaf 3, Leaf 5))) = false;
val test_isBST_11 = isBST (Node (0, Node (~3, Leaf ~5, Leaf ~1), Node (3, Leaf 1, Leaf 5))) = true;
